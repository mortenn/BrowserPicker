# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: BrowserPicker.sln
      App_Project_Path: src/BrowserPicker.App/BrowserPicker.App.csproj
      Wix_Project_Directory: dist/Setup
      Wix_Project_Path: dist/Setup/Setup.wixproj
      signtool: "C:\\Program Files (x86)\\Microsoft SDKs\\ClickOnce\\SignTool\\signtool.exe"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Determine version
      id: version
      uses: paulhatch/semantic-version@v5.3.0
      with:
        version_format: "${major}.${minor}.${patch}-beta${increment}"

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore dotnet tools
    - name: Restore tools
      run: dotnet tool restore

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:Solution_Name -p VersionPrefix=${env:major}.${env:minor}.${env:patch} -p VersionSuffix=beta${env:increment}
      env:
        major: ${{ steps.version.outputs.major }}
        minor: ${{ steps.version.outputs.minor }}
        patch: ${{ steps.version.outputs.patch }}
        increment: ${{ steps.version.outputs.increment }}

    # Build and publish the application
    - name: Build application
      run: dotnet publish -c $env:Configuration $env:App_Project_Path -p VersionPrefix=${env:major}.${env:minor}.${env:patch} -p VersionSuffix=beta${env:increment}
      env:
        Configuration: ${{ matrix.configuration }}
        major: ${{ steps.version.outputs.major }}
        minor: ${{ steps.version.outputs.minor }}
        patch: ${{ steps.version.outputs.patch }}
        increment: ${{ steps.version.outputs.increment }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        [IO.File]::WriteAllBytes("GitHubActionsWorkflow.pfx", $pfx_cert_byte)

    - name: Sign the executable
      run: |
        & $env:signtool sign /debug /tr http://timestamp.digicert.com /td sha256 /fd sha256 /f GitHubActionsWorkflow.pfx /p ${{ secrets.Pfx_Key }} src\BrowserPicker.App\bin\${env:Configuration}\net8.0-windows\publish\BrowserPicker*.dll src\BrowserPicker.App\bin\${env:Configuration}\net8.0-windows\publish\BrowserPicker.exe
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the installer
      run: dotnet build $env:Wix_Project_Path --no-dependencies -c $env:Configuration -p Version=${env:major}.${env:minor}.${env:patch}.${env:increment}
      env:
        Configuration: ${{ matrix.configuration }}
        major: ${{ steps.version.outputs.major }}
        minor: ${{ steps.version.outputs.minor }}
        patch: ${{ steps.version.outputs.patch }}
        increment: ${{ steps.version.outputs.increment }}

    - name: Sign the installer
      run: |
        & $env:signtool sign /debug /tr http://timestamp.digicert.com /td sha256 /fd sha256 /f GitHubActionsWorkflow.pfx /p ${{ secrets.Pfx_Key }} dist\Setup\bin\${env:Configuration}\BrowserPicker.msi
      env:
        Configuration: ${{ matrix.configuration }}
        
    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4.3.1
      with:
        name: BrowserPicker-${{ steps.version.outputs.version }}-${{ matrix.configuration }}
        path: ${{ env.Wix_Project_Directory }}/bin/${{ matrix.configuration }}
